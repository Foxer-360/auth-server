# Define input types
input UserWhereUniqueInput {
  accessToken: String
  auth0Id: ID
  email: String
  id: ID
}

input UserWhereInput {
  auth0Id: ID
  """ All mutations of auth0Id """
  auth0Id_not: ID
  auth0Id_in: [ID!]!
  auth0Id_not_in: [ID!]!
  auth0Id_lt: ID
  auth0Id_lte: ID
  auth0Id_gt: ID
  auth0Id_gte: ID
  auth0Id_contains: ID
  auth0Id_not_contains: ID
  auth0Id_starts_with: ID
  auth0Id_not_starts_with: ID
  auth0Id_ends_with: ID
  auth0Id_not_ends_with: ID

  avatar: String
  """ All mutations of avatar """
  avatar_not: String
  avatar_in: [String!]!
  avatar_not_in: [String!]!
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String

  email: String
  """ All mutations of email  """
  email_not: String
  email_in: [String!]!
  email_not_in: [String!]!
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String

  id: ID
  """ All mutations of id """
  id_not: ID
  id_in: [ID!]!
  id_not_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID

  name: String
  """ All mutations of name """
  name_not: String
  name_in: [String!]!
  name_not_in: [String!]!
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String

  superuser: Boolean
}

input UserCreateInput {
  avatar: String
  email: String!
  name: String!
  password: String!
  superuser: Boolean
  clients: [ID!]
  enabledProjects: [ID!]
  enabledWebsites: [ID!]
  owns: [ID!]
  roles: [ID!]
  # projectRoles: [ID!]!
  # websiteRoles: [ID!]!
}

input UserUpdateInput {
  avatar: String
  name: String
  superuser: Boolean
  clients: [ID!]
  enabledProjects: [ID!]
  enabledWebsites: [ID!]
  owns: [ID!]
  roles: [ID!]
}

# Define all mutations
type Mutation {
  createUser(data: UserCreateInput): User
  deleteUser(where: UserWhereUniqueInput): User
  updateUser(data: UserUpdateInput, where: UserWhereUniqueInput): User
}

# Define all queries
type Query {
  user(where: UserWhereUniqueInput): User
  users(where: UserWhereInput): [User]!
}
